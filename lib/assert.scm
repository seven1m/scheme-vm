(import (only (scheme base) begin define-syntax eq? eqv? if newline not quote write-string))

(define-library (assert)
  (export assert)
  (begin
    (define-syntax assert
      (syntax-rules (eq? eqv?)
        ((assert (eq? expected actual))
        (if (not (eq? expected actual))
            (begin
              (write-string "(assert (eq? ")
              (write-string (quote expected))
              (write-string " ")
              (write-string (quote actual))
              (write-string ")) failed:")
              (newline)
              (write-string "  expected: ")
              (write-string expected)
              (newline)
              (write-string "  actual:   ")
              (write-string actual)
              (newline))))
        ((assert (eqv? expected actual))
        (if (not (eqv? expected actual))
            (begin
              (write-string "(assert (eqv? ")
              (write-string (quote expected))
              (write-string " ")
              (write-string (quote actual))
              (write-string ")) failed:")
              (newline)
              (write-string "  expected: ")
              (write-string expected)
              (newline)
              (write-string "  actual:   ")
              (write-string actual)
              (newline))))
        ((assert expr)
        (if (not expr)
            (begin
              (write-string "(assert ")
              (write-string (quote expr))
              (write-string ") failed:")
              (newline)
              (write-string "  expected: (not #f)")
              (newline)
              (write-string "  actual:   ")
              (write-string expr)
              (newline))))))))
