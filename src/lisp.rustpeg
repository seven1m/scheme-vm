use rb;
use rb::Value;
use atom::atom;

whitespace
	= [ \t\n]+

escape
	= "\\" .

string -> Option<Value>
	= "\"" s:$(escape / [^"])* "\"" { Some(rb::str_new(&s.to_string())) }

atom -> Option<Value>
	= n:$([^\(\) \t\n\[\]\{\}"]+) { Some(atom(&n)) }

sexp -> Option<Value>
	= n:(quoted_sexp / simple_sexp) { Some(n) }

comment -> Option<Value>
	= (block_comment / line_comment / datum_comment) { None }

expression -> Option<Value>
	= string / comment / sexp / atom

quote -> Value
	= n:$("'" / ",@" / "," / "`") { rb::str_new(&n.to_string()) }

quoted_sexp -> Value
	= q:quote s:simple_sexp { rb::vec2rbarr(vec![q, s]) }

simple_sexp -> Value
	= "(" s:expressions ")" {s}

block_comment
	= "#|" (!"|#" .)* "|#"

line_comment
	= ";" [^\n]*

datum_comment
	= "#;" " "? (atom / sexp)

expressions -> Value
  = whitespace* s:(expression ** whitespace) whitespace* { rb::vec2rbarr(s.into_iter().filter_map(|i| i).collect()) }

pub program -> Value
	= expressions
