use values::*;

whitespace
	= [ \t\n]+

escape
	= "\\" .

string -> Option<Box<Val>>
	= "\"" s:$(escape / [^"])* "\"" { Some(Box::new(Val::Str { val: s.to_string() })) }

atom -> Option<Box<Val>>
	= n:$([^\(\) \t\n\[\]\{\}"]+) { Some(Box::new(Val::Atom { name: n.to_string() })) }

sexp -> Option<Box<Val>>
	= n:(quoted_sexp / simple_sexp) { Some(n) }

comment -> Option<Box<Val>>
	= (block_comment / line_comment / datum_comment) { None }

expression -> Option<Box<Val>>
	= string / comment / sexp / atom

quote -> Box<Val>
	= n:$("'" / ",@" / "," / "`") { Box::new(Val::Atom { name: n.to_string() }) }

quoted_sexp -> Box<Val>
	= q:quote s:simple_sexp { Box::new(Val::Arr { vals: vec![q, s] }) }

simple_sexp -> Box<Val>
	= "(" s:expressions ")" {s}

block_comment
	= "#|" (!"|#" .)* "|#"

line_comment
	= ";" [^\n]*

datum_comment
	= "#;" " "? (atom / sexp)

expressions -> Box<Val>
	= whitespace* s:(expression ** whitespace) whitespace* { Box::new(Val::Arr { vals: s.into_iter().filter_map(|i| i).collect() }) }

pub program -> Box<Val>
	= expressions
